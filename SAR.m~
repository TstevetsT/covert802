%% Modified code from:
% http://www.mathworks.com/help/comm/gs/compute-ber-for-a-qam-system-with...
% -awgn-using-matlab.html
M = 4;                      % Size of signal constellation
Mc = 16;                      % Size of covert constellation
k = log2(M);                % Number of bits per symbol
kc = log2(Mc);                % Number of bits per covert symbol
n = 3000;                  % Number of bits to process
numSamplesPerSymbol = 1;    % Oversampling factor
rng default                 % Use default random number generator
dataIn = randi([0 1],n,1);  % Generate vector of binary data
dataInc = randi([0 1],n,1);  % Generate vector of covert binary data
dataInMatrix = reshape(dataIn,length(dataIn)/2,2)   % Reshape data into binary 2-tuples
dataInMatrixc = reshape(dataInc,length(dataInc)/4,4)   % Reshape data into binary 4-tuples
dataSymbolsIn = bi2de(dataInMatrix)                 % Convert to integers
dataSymbolsInc = bi2de(dataInMatrixc)                 % Convert to integers
dataMod = qammod(dataSymbolsIn,M,0,'gray');  % Gray coding, phase offset = 0
dataModc = qammod(dataSymbolsInc,Mc,0,'gray'); % Gray coding, phase offset = 0
dataModc=dataModc/2;       %Shrink constellation size to allign with signal
dataModj=[dataMod;dataModc];    %Combine data from covert and cover signals
dataSymbolsInc21=dataSymbolsInc(1:length(dataSymbolsInc)/2)
dataSymbolsInc22=dataSymbolsInc(length(dataSymbolsInc)/2)
EbNo = 10;
snr = EbNo + 10*log10(k) - 10*log10(numSamplesPerSymbol);
receivedSignal = awgn(dataMod,snr,'measured');
receivedSignalc = awgn(dataModc,snr,'measured');
receivedSignalj = awgn(dataModj,snr,'measured');
sPlotFig = scatterplot(receivedSignal,1,0,'g.');
hold on
scatterplot(dataMod,1,0,'k*',sPlotFig)
sPlotFigc = scatterplot(receivedSignalc,1,0,'g.');
hold on
scatterplot(dataModc,1,0,'k*',sPlotFigc)
sPlotFigj = scatterplot(receivedSignalj,1,0,'g.');
hold on
scatterplot(dataModj,1,0,'k*',sPlotFigj)